import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

buildscript {
    ext {
        //BOMs
        springBootVersion = '2.0.3.RELEASE'
        springCloudBomVersion = 'Finchley.RELEASE'

        //Plugins
        gradleDockerPluginVersion = '3.2.5'

        //Dependencies
        commonsLang3Version = '3.6'
        googleGuavaVersion = '25.0-jre'
        swaggerVersion = '2.6.1'
    }

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/'}
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.bmuschko:gradle-docker-plugin:${gradleDockerPluginVersion}")
    }
}

apply plugin: 'idea'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

allprojects {
    group = 'lv.schoollibrary'
    version = '1.0'

    apply plugin: 'idea'
    apply plugin: 'java'

    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/'}
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "com.bmuschko.docker-remote-api"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudBomVersion}")
        }

        dependencies {
            dependency("org.apache.commons:commons-lang3:${commonsLang3Version}")
            dependency("org.json:json:20180130")
            dependency("javax.ws.rs:javax.ws.rs-api:2.1")
        }
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web") {
            exclude(module: "spring-boot-starter-tomcat")
        }

        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile("org.springframework.boot:spring-boot-starter-actuator")

        compile("org.apache.commons:commons-lang3")
        compile("com.google.guava:guava:${googleGuavaVersion}")

        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task buildImage(type: DockerBuildImage, dependsOn: build) {
        def imageName = "restapisample/${project.name}"
        tags = ["${imageName}:latest".toString()]
        doFirst {
            copy {
                from inputDir
                into "$buildDir/docker"
                include '**'
            }
            copy {
                from jar
                into "$buildDir/docker"
                include jar.archiveName
                rename jar.archiveName, "${jar.baseName}.jar"
            }
            inputDir = project.file("build/docker")
        }
    }

    task removeImage(type: DockerRemoveImage, dependsOn: buildImage) {
        force = true
        targetImageId { buildImage.getImageId() }
    }
}

task buildImages(dependsOn: [':schoolkid-service:buildImage', ':book-service:buildImage', ':order-service:buildImage']) {
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10'
    distributionType = Wrapper.DistributionType.ALL
}
